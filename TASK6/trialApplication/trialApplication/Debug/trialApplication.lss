
trialApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c99  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065c  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000892  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  74:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:

void APP_init(void)
{
     
    //INIT LEDS
  	LED_init(RED_LED_PORT,RED_LED_PIN);//A
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_init>
    LED_init(GREEN_LED_PORT,GREEN_LED_PIN);//B
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	84 e4       	ldi	r24, 0x44	; 68
  88:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_init>
    LED_init(BLUE_LED_PORT,BLUE_LED_PIN); //C
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	84 e4       	ldi	r24, 0x44	; 68
  90:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_init>
    //INIT BUTTON
    button_init(BUTTON_1_PORT, BUTTON_1_PIN); 
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <button_init>
  9c:	08 95       	ret

0000009e <APP_start>:

}
void APP_start(void)
{
	  
	  button_read(BUTTON_1_PORT, BUTTON_1_PIN, &buttonstate);
  9e:	42 e6       	ldi	r20, 0x62	; 98
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <button_read>
 
	
    if(buttonstate==HIGH)
  aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <buttonstate>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	89 f4       	brne	.+34     	; 0xd4 <APP_start+0x36>
	  {
        count++;
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        buttonstate=LOW;
  c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <buttonstate>
        if (count == 6)
  c8:	06 97       	sbiw	r24, 0x06	; 6
  ca:	21 f4       	brne	.+8      	; 0xd4 <APP_start+0x36>
           
            count = 0;
  cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
            
      }
    
      if (count == 0 )
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	89 2b       	or	r24, r25
  de:	61 f4       	brne	.+24     	; 0xf8 <APP_start+0x5a>
      {
       LED_off(RED_LED_PORT,RED_LED_PIN);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	84 e4       	ldi	r24, 0x44	; 68
  e4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
       LED_off(GREEN_LED_PORT,GREEN_LED_PIN);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	84 e4       	ldi	r24, 0x44	; 68
  ec:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
       LED_off(BLUE_LED_PORT,BLUE_LED_PIN);
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
      }

     switch (count)
  f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	91 05       	cpc	r25, r1
 104:	39 f1       	breq	.+78     	; 0x154 <APP_start+0xb6>
 106:	34 f4       	brge	.+12     	; 0x114 <APP_start+0x76>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	91 05       	cpc	r25, r1
 10c:	49 f0       	breq	.+18     	; 0x120 <APP_start+0x82>
 10e:	02 97       	sbiw	r24, 0x02	; 2
 110:	a1 f0       	breq	.+40     	; 0x13a <APP_start+0x9c>
 112:	08 95       	ret
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	91 05       	cpc	r25, r1
 118:	51 f1       	breq	.+84     	; 0x16e <APP_start+0xd0>
 11a:	05 97       	sbiw	r24, 0x05	; 5
 11c:	a9 f1       	breq	.+106    	; 0x188 <APP_start+0xea>
 11e:	08 95       	ret
      {
        case 1:
        LED_on(RED_LED_PORT,RED_LED_PIN);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	84 e4       	ldi	r24, 0x44	; 68
 124:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_off(BLUE_LED_PORT,BLUE_LED_PIN);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	84 e4       	ldi	r24, 0x44	; 68
 12c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
        LED_off(GREEN_LED_PORT,GREEN_LED_PIN);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	84 e4       	ldi	r24, 0x44	; 68
 134:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
        break;
 138:	08 95       	ret
        case 2:
        LED_on(RED_LED_PORT,RED_LED_PIN);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	84 e4       	ldi	r24, 0x44	; 68
 13e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_on(GREEN_LED_PORT,GREEN_LED_PIN);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	84 e4       	ldi	r24, 0x44	; 68
 146:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_off(BLUE_LED_PORT,BLUE_LED_PIN);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
        break;
 152:	08 95       	ret
        case 3:
        LED_on(RED_LED_PORT,RED_LED_PIN);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	84 e4       	ldi	r24, 0x44	; 68
 158:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_on(GREEN_LED_PORT,GREEN_LED_PIN);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	84 e4       	ldi	r24, 0x44	; 68
 160:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_on(BLUE_LED_PORT,BLUE_LED_PIN);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	84 e4       	ldi	r24, 0x44	; 68
 168:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        break;
 16c:	08 95       	ret
       case 4:
        LED_on(RED_LED_PORT,RED_LED_PIN);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_on(GREEN_LED_PORT,GREEN_LED_PIN);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	84 e4       	ldi	r24, 0x44	; 68
 17a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_off(BLUE_LED_PORT,BLUE_LED_PIN);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	84 e4       	ldi	r24, 0x44	; 68
 182:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
        break;
 186:	08 95       	ret
       case 5:
        LED_on(RED_LED_PORT,RED_LED_PIN);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	84 e4       	ldi	r24, 0x44	; 68
 18c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_on>
        LED_off(GREEN_LED_PORT,GREEN_LED_PIN);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	84 e4       	ldi	r24, 0x44	; 68
 194:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
        LED_off(BLUE_LED_PORT,BLUE_LED_PIN);
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	84 e4       	ldi	r24, 0x44	; 68
 19c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_off>
 1a0:	08 95       	ret

000001a2 <button_init>:
 *  Author: YAS
 */ 
#include "button.h"

void button_init(uint8_t ButtonPort, uint8_t ButtonPin)
{
 1a2:	98 2f       	mov	r25, r24
 1a4:	86 2f       	mov	r24, r22
   DIO_init(ButtonPin,ButtonPort, IN);
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	69 2f       	mov	r22, r25
 1aa:	0e 94 01 01 	call	0x202	; 0x202 <DIO_init>
 1ae:	08 95       	ret

000001b0 <button_read>:
}
void button_read(uint8_t ButtonPort, uint8_t ButtonPin, uint8_t *value)
{
 1b0:	98 2f       	mov	r25, r24
 1b2:	86 2f       	mov	r24, r22
   for (int i = 0; i < 30000; i++);
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <button_read+0xe>
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	20 33       	cpi	r18, 0x30	; 48
 1c0:	65 e7       	ldi	r22, 0x75	; 117
 1c2:	36 07       	cpc	r19, r22
 1c4:	d4 f3       	brlt	.-12     	; 0x1ba <button_read+0xa>
      
   
   DIO_read(ButtonPin, ButtonPort, value);
 1c6:	69 2f       	mov	r22, r25
 1c8:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_read>
 1cc:	08 95       	ret

000001ce <LED_init>:
 */ 
#include "Ied.h"


void  LED_init(uint8_t ledPort, uint8_t ledPin)
{
 1ce:	98 2f       	mov	r25, r24
 1d0:	86 2f       	mov	r24, r22
	DIO_init(ledPin,ledPort,OUT);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	69 2f       	mov	r22, r25
 1d6:	0e 94 01 01 	call	0x202	; 0x202 <DIO_init>
 1da:	08 95       	ret

000001dc <LED_on>:
}
void  LED_on(uint8_t ledPort, uint8_t ledPin)
{
 1dc:	98 2f       	mov	r25, r24
 1de:	86 2f       	mov	r24, r22
	DIO_write(ledPin,ledPort,HIGH);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	69 2f       	mov	r22, r25
 1e4:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_write>
 1e8:	08 95       	ret

000001ea <LED_off>:
}
void  LED_off(uint8_t ledPort, uint8_t ledPin)
{
 1ea:	98 2f       	mov	r25, r24
 1ec:	86 2f       	mov	r24, r22
	DIO_write(ledPin,ledPort,LOW);
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	69 2f       	mov	r22, r25
 1f2:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_write>
 1f6:	08 95       	ret

000001f8 <main>:
#include "Application/app.h"


int main(void)
{
    APP_init();
 1f8:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
    while (1) 
    {
      APP_start();
 1fc:	0e 94 4f 00 	call	0x9e	; 0x9e <APP_start>
 200:	fd cf       	rjmp	.-6      	; 0x1fc <main+0x4>

00000202 <DIO_init>:
 */ 
#include "dio.h"

void DIO_init(uint8_t PinNumber , uint8_t PortNumber, uint8_t direction)
{
	switch(PortNumber)
 202:	62 34       	cpi	r22, 0x42	; 66
 204:	59 f1       	breq	.+86     	; 0x25c <DIO_init+0x5a>
 206:	18 f4       	brcc	.+6      	; 0x20e <DIO_init+0xc>
 208:	61 34       	cpi	r22, 0x41	; 65
 20a:	41 f0       	breq	.+16     	; 0x21c <DIO_init+0x1a>
 20c:	08 95       	ret
 20e:	63 34       	cpi	r22, 0x43	; 67
 210:	09 f4       	brne	.+2      	; 0x214 <DIO_init+0x12>
 212:	44 c0       	rjmp	.+136    	; 0x29c <DIO_init+0x9a>
 214:	64 34       	cpi	r22, 0x44	; 68
 216:	09 f4       	brne	.+2      	; 0x21a <DIO_init+0x18>
 218:	60 c0       	rjmp	.+192    	; 0x2da <DIO_init+0xd8>
 21a:	08 95       	ret
	{
		case PORT_A:
		if (direction == IN)
 21c:	41 11       	cpse	r20, r1
 21e:	0e c0       	rjmp	.+28     	; 0x23c <DIO_init+0x3a>
		{
			DDRA &= ~(1<<PinNumber); // input
 220:	4a b3       	in	r20, 0x1a	; 26
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_init+0x2c>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_init+0x28>
 232:	cb 01       	movw	r24, r22
 234:	80 95       	com	r24
 236:	84 23       	and	r24, r20
 238:	8a bb       	out	0x1a, r24	; 26
 23a:	08 95       	ret
		}
		else if (direction == OUT)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	09 f0       	breq	.+2      	; 0x242 <DIO_init+0x40>
 240:	6a c0       	rjmp	.+212    	; 0x316 <DIO_init+0x114>
		{
			
			DDRA |=(1<<PinNumber); // Output
 242:	4a b3       	in	r20, 0x1a	; 26
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_init+0x4e>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_init+0x4a>
 254:	cb 01       	movw	r24, r22
 256:	84 2b       	or	r24, r20
 258:	8a bb       	out	0x1a, r24	; 26
 25a:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if (direction == IN)
 25c:	41 11       	cpse	r20, r1
 25e:	0e c0       	rjmp	.+28     	; 0x27c <DIO_init+0x7a>
		{
			DDRB &= ~(1<<PinNumber); // input
 260:	47 b3       	in	r20, 0x17	; 23
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_init+0x6c>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_init+0x68>
 272:	cb 01       	movw	r24, r22
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	87 bb       	out	0x17, r24	; 23
 27a:	08 95       	ret
		}
		else if (direction == OUT)
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	09 f0       	breq	.+2      	; 0x282 <DIO_init+0x80>
 280:	4a c0       	rjmp	.+148    	; 0x316 <DIO_init+0x114>
		{
			
			DDRB |=(1<<PinNumber); // Output
 282:	47 b3       	in	r20, 0x17	; 23
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_init+0x8e>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_init+0x8a>
 294:	cb 01       	movw	r24, r22
 296:	84 2b       	or	r24, r20
 298:	87 bb       	out	0x17, r24	; 23
 29a:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if (direction == IN)
 29c:	41 11       	cpse	r20, r1
 29e:	0e c0       	rjmp	.+28     	; 0x2bc <DIO_init+0xba>
		{
			DDRC &= ~(1<<PinNumber); // input
 2a0:	44 b3       	in	r20, 0x14	; 20
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	b9 01       	movw	r22, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_init+0xac>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	8a 95       	dec	r24
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_init+0xa8>
 2b2:	cb 01       	movw	r24, r22
 2b4:	80 95       	com	r24
 2b6:	84 23       	and	r24, r20
 2b8:	84 bb       	out	0x14, r24	; 20
 2ba:	08 95       	ret
		}
		else if (direction == OUT)
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	59 f5       	brne	.+86     	; 0x316 <DIO_init+0x114>
		{
			
			DDRC |=(1<<PinNumber); // Output
 2c0:	44 b3       	in	r20, 0x14	; 20
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_init+0xcc>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_init+0xc8>
 2d2:	cb 01       	movw	r24, r22
 2d4:	84 2b       	or	r24, r20
 2d6:	84 bb       	out	0x14, r24	; 20
 2d8:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if (direction == IN)
 2da:	41 11       	cpse	r20, r1
 2dc:	0e c0       	rjmp	.+28     	; 0x2fa <DIO_init+0xf8>
		{
			DDRD &= ~(1<<PinNumber); // input
 2de:	41 b3       	in	r20, 0x11	; 17
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	b9 01       	movw	r22, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_init+0xea>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_init+0xe6>
 2f0:	cb 01       	movw	r24, r22
 2f2:	80 95       	com	r24
 2f4:	84 23       	and	r24, r20
 2f6:	81 bb       	out	0x11, r24	; 17
 2f8:	08 95       	ret
		}
		else if (direction == OUT)
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	61 f4       	brne	.+24     	; 0x316 <DIO_init+0x114>
		{
			
			DDRD |=(1<<PinNumber); // Output
 2fe:	41 b3       	in	r20, 0x11	; 17
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_init+0x10a>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_init+0x106>
 310:	cb 01       	movw	r24, r22
 312:	84 2b       	or	r24, r20
 314:	81 bb       	out	0x11, r24	; 17
 316:	08 95       	ret

00000318 <DIO_write>:
	}
}
void DIO_write(uint8_t PinNumber , uint8_t PortNumber, uint8_t value)
{

	switch(PortNumber)
 318:	62 34       	cpi	r22, 0x42	; 66
 31a:	59 f1       	breq	.+86     	; 0x372 <DIO_write+0x5a>
 31c:	18 f4       	brcc	.+6      	; 0x324 <DIO_write+0xc>
 31e:	61 34       	cpi	r22, 0x41	; 65
 320:	41 f0       	breq	.+16     	; 0x332 <DIO_write+0x1a>
 322:	08 95       	ret
 324:	63 34       	cpi	r22, 0x43	; 67
 326:	09 f4       	brne	.+2      	; 0x32a <DIO_write+0x12>
 328:	44 c0       	rjmp	.+136    	; 0x3b2 <DIO_write+0x9a>
 32a:	64 34       	cpi	r22, 0x44	; 68
 32c:	09 f4       	brne	.+2      	; 0x330 <DIO_write+0x18>
 32e:	60 c0       	rjmp	.+192    	; 0x3f0 <DIO_write+0xd8>
 330:	08 95       	ret
	{
		case PORT_A:
		if (value == LOW)
 332:	41 11       	cpse	r20, r1
 334:	0e c0       	rjmp	.+28     	; 0x352 <DIO_write+0x3a>
		{
			PORTA &= ~(1<<PinNumber); // write 0
 336:	4b b3       	in	r20, 0x1b	; 27
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_write+0x2c>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_write+0x28>
 348:	cb 01       	movw	r24, r22
 34a:	80 95       	com	r24
 34c:	84 23       	and	r24, r20
 34e:	8b bb       	out	0x1b, r24	; 27
 350:	08 95       	ret
		}
		else if (value == HIGH)
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	09 f0       	breq	.+2      	; 0x358 <DIO_write+0x40>
 356:	6a c0       	rjmp	.+212    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			
			PORTA |=(1<<PinNumber); // write 1
 358:	4b b3       	in	r20, 0x1b	; 27
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_write+0x4e>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_write+0x4a>
 36a:	cb 01       	movw	r24, r22
 36c:	84 2b       	or	r24, r20
 36e:	8b bb       	out	0x1b, r24	; 27
 370:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if (value == LOW)
 372:	41 11       	cpse	r20, r1
 374:	0e c0       	rjmp	.+28     	; 0x392 <DIO_write+0x7a>
		{
			PORTB &= ~(1<<PinNumber); // write 0
 376:	48 b3       	in	r20, 0x18	; 24
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_write+0x6c>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_write+0x68>
 388:	cb 01       	movw	r24, r22
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	88 bb       	out	0x18, r24	; 24
 390:	08 95       	ret
		}
		else if (value == HIGH)
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_write+0x80>
 396:	4a c0       	rjmp	.+148    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			
			PORTB |=(1<<PinNumber); // write 1
 398:	48 b3       	in	r20, 0x18	; 24
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_write+0x8e>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_write+0x8a>
 3aa:	cb 01       	movw	r24, r22
 3ac:	84 2b       	or	r24, r20
 3ae:	88 bb       	out	0x18, r24	; 24
 3b0:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if (value == LOW)
 3b2:	41 11       	cpse	r20, r1
 3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <DIO_write+0xba>
		{
			PORTC &= ~(1<<PinNumber); // write 0
 3b6:	45 b3       	in	r20, 0x15	; 21
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	b9 01       	movw	r22, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_write+0xac>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_write+0xa8>
 3c8:	cb 01       	movw	r24, r22
 3ca:	80 95       	com	r24
 3cc:	84 23       	and	r24, r20
 3ce:	85 bb       	out	0x15, r24	; 21
 3d0:	08 95       	ret
		}
		else if (value == OUT)
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	59 f5       	brne	.+86     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			
			PORTC |=(1<<PinNumber); // write 1
 3d6:	45 b3       	in	r20, 0x15	; 21
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	b9 01       	movw	r22, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_write+0xcc>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	8a 95       	dec	r24
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_write+0xc8>
 3e8:	cb 01       	movw	r24, r22
 3ea:	84 2b       	or	r24, r20
 3ec:	85 bb       	out	0x15, r24	; 21
 3ee:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if (value == LOW)
 3f0:	41 11       	cpse	r20, r1
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		{
			PORTD &= ~(1<<PinNumber); // write 0
 3f4:	42 b3       	in	r20, 0x12	; 18
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_write+0xe6>
 406:	cb 01       	movw	r24, r22
 408:	80 95       	com	r24
 40a:	84 23       	and	r24, r20
 40c:	82 bb       	out	0x12, r24	; 18
 40e:	08 95       	ret
		}

		else if (value == HIGH)
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	61 f4       	brne	.+24     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			
			PORTD |=(1<<PinNumber); // write 1
 414:	42 b3       	in	r20, 0x12	; 18
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	b9 01       	movw	r22, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	8a 95       	dec	r24
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	cb 01       	movw	r24, r22
 428:	84 2b       	or	r24, r20
 42a:	82 bb       	out	0x12, r24	; 18
 42c:	08 95       	ret

0000042e <DIO_read>:
		break;
	}
}
void DIO_read(uint8_t PinNumber , uint8_t PortNumber, uint8_t *value)
{
 switch(PortNumber)
 42e:	62 34       	cpi	r22, 0x42	; 66
 430:	b1 f0       	breq	.+44     	; 0x45e <DIO_read+0x30>
 432:	18 f4       	brcc	.+6      	; 0x43a <DIO_read+0xc>
 434:	61 34       	cpi	r22, 0x41	; 65
 436:	31 f0       	breq	.+12     	; 0x444 <DIO_read+0x16>
 438:	08 95       	ret
 43a:	63 34       	cpi	r22, 0x43	; 67
 43c:	e9 f0       	breq	.+58     	; 0x478 <DIO_read+0x4a>
 43e:	64 34       	cpi	r22, 0x44	; 68
 440:	41 f1       	breq	.+80     	; 0x492 <DIO_read+0x64>
 442:	08 95       	ret
 {
	 case PORT_A:
	 *value = GET_BIT(PINA, PinNumber);
 444:	29 b3       	in	r18, 0x19	; 25
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_read+0x22>
 44c:	75 95       	asr	r23
 44e:	67 95       	ror	r22
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_read+0x1e>
 454:	cb 01       	movw	r24, r22
 456:	81 70       	andi	r24, 0x01	; 1
 458:	fa 01       	movw	r30, r20
 45a:	80 83       	st	Z, r24
	 break;
 45c:	08 95       	ret
	 case PORT_B:
	 *value = GET_BIT(PINB, PinNumber);
 45e:	26 b3       	in	r18, 0x16	; 22
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_read+0x3c>
 466:	75 95       	asr	r23
 468:	67 95       	ror	r22
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_read+0x38>
 46e:	cb 01       	movw	r24, r22
 470:	81 70       	andi	r24, 0x01	; 1
 472:	fa 01       	movw	r30, r20
 474:	80 83       	st	Z, r24
	 break;
 476:	08 95       	ret
	 case PORT_C:
	 *value = GET_BIT(PINC, PinNumber);
 478:	23 b3       	in	r18, 0x13	; 19
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	b9 01       	movw	r22, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_read+0x56>
 480:	75 95       	asr	r23
 482:	67 95       	ror	r22
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_read+0x52>
 488:	cb 01       	movw	r24, r22
 48a:	81 70       	andi	r24, 0x01	; 1
 48c:	fa 01       	movw	r30, r20
 48e:	80 83       	st	Z, r24
	 break;
 490:	08 95       	ret
	 case PORT_D:
	 *value = GET_BIT(PIND, PinNumber);
 492:	20 b3       	in	r18, 0x10	; 16
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_read+0x70>
 49a:	75 95       	asr	r23
 49c:	67 95       	ror	r22
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_read+0x6c>
 4a2:	cb 01       	movw	r24, r22
 4a4:	81 70       	andi	r24, 0x01	; 1
 4a6:	fa 01       	movw	r30, r20
 4a8:	80 83       	st	Z, r24
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
